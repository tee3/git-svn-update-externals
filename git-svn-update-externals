#!/usr/bin/env python

import os
import subprocess

import string
import urlparse

dryrun = False
verbose = True
fake_input = False


fake_data = \
    '# this is a comment\n' + \
    '/http://svn.example.com/libraries/libl0/tags/1.0.0 lib/src/libl0\n' + \
    '/lib/src/libl1 http://libraries/libl1/tags/0.20.1\n' + \
    '/lib/src/libl2 http://libraries/libl2/trunk\n' + \
    '/lib/src/libl3 http://libraries/libl3/branches/devel'


def parse_svn_externals_line(line):
    if len(line) == 0:
        return None

    # remove comments
    if line[0] == '#':
        return None

    items = line.split()

    if len(items) != 2:
        return None

    first = items[0]
    second = items[1]

    # remove absolute references from directories
    # @todo hack to deal with 'new' svn:externals format
    if first[0:5] == '/http':
        line = first[1:] + ' ' + './' + second
    elif first[0] == '/':
        line = '.' + first + ' ' + second

    items = line.split()

    if len(items) != 2:
        return None

    first = items[0]
    second = items[1]

    # @todo hack to deal with 'new' svn:externals format
    if first[0:4] == 'http':
        directory = second
        url = first
    else:
        directory = first
        url = second

    externals = {
        'directory': directory,
        'url': url,
    }

    url_components = url.split('/')

    # parse the url, find the base url and branch name, and verify

    base_url = url
    branchname = ''
    branchpath = ''

    if url_components[-1] == 'trunk':
        base_url = string.join(url_components[0:-1], '/')
        branchpath = 'master'
        branchname = 'master'
    if url_components[-2] == 'branches':
        base_url = string.join(url_components[0:-2], '/')
        branchname = url_components[-1]
        branchpath = 'origin/%s' % (branchname)
    elif url_components[-2] == 'tags':
        base_url = string.join(url_components[0:-2], '/')
        branchname = url_components[-1]
        branchpath = 'origin/tags/%s' % (branchname)

    # @todo hack to redirect http:// to https://
    xxx = urlparse.urlparse(base_url)
    scheme = xxx.scheme
    if xxx.scheme == 'http':
        scheme = 'https'

    externals['original_base_original'] = base_url
    externals['base_url'] = urlparse.urlunparse((scheme, xxx[1], xxx[2], xxx[3], xxx[4], xxx[5]))
    externals['branchname'] = branchname
    externals['branchpath'] = branchpath

    return externals


def parse_svn_externals_format(data):
    externals = {}
    for line in data.split('\n'):
        e = parse_svn_externals_line(line)

        if e is None:
            continue

        assert 'directory' in e

        externals[e['directory']] = e

    return externals


# this does the work given the externals
def operate_on_externals_from_cwd(externals):
    for directory in externals.keys():
        d = externals[directory]['directory']

        assert d == directory

        # @todo parse gitignore and set it

        bu = externals[d]['base_url']
        bp = externals[d]['branchpath']

        if not os.path.exists(d):
            command = 'git svn clone -s %s %s' % (bu, d)
            if verbose or dryrun:
                print 'running: %s' % (command)
            if not dryrun:
                os.system(command)

        if not dryrun:
            if not os.path.exists(d):
                exit(1)  # totally broken

        if not dryrun:
            rootdir = os.getcwd()
            os.chdir('%s' % (d))

        # fetch new information
        command = 'git svn fetch --fetch-all'
        if verbose or dryrun:
            print 'running: %s' % (command)
        if not dryrun:
            os.system(command)

        # checkout the right branch
        command = 'git checkout %s' % (bp)
        if verbose or dryrun:
            print 'running: %s' % (command)
        if not dryrun:
            os.system(command)

        # recurse into each svn:external as we find it
        if verbose or dryrun:
            print 'running: finding svn:externals at %s\n' % (d)
        if not dryrun:
            git_svn_update_externals(d)

        if not dryrun:
            os.chdir(rootdir)


def generate_svn_externals_from_cwd():
    data = ''
    if not fake_input:
        revision = None
        command = 'git rev-parse HEAD'
        if verbose or dryrun:
            print 'running: %s' % (command)
        if not dryrun:
            # @todo for 2.7, data = subprocess.check_output(command, shell=True)
            data = subprocess.Popen(command.split(), stdout=subprocess.PIPE).communicate()[0]

            commitid = data

            if commitid is not None:
                command = 'git svn find-rev %s' % (commitid)
                if verbose or dryrun:
                    print 'running: %s' % (command)
                if not dryrun:
                    # @todo for 2.7, data = subprocess.check_output(command, shell=True)
                    revision = subprocess.Popen(command.split(), stdout=subprocess.PIPE).communicate()[0]
                    if revision == '':
                        revision = None

        command = 'git svn show-externals'
        if revision is not None:
            command += ' -r%s' % (revision)
        if verbose or dryrun:
            print 'running: %s' % (command)
        if not dryrun:
            # @todo for 2.7, data = subprocess.check_output(command, shell=True)
            data = subprocess.Popen(command.split(), stdout=subprocess.PIPE).communicate()[0]
    else:
        data = fake_data

    return data


def git_svn_update_externals(directory):
    data = generate_svn_externals_from_cwd()
    externals = parse_svn_externals_format(data)

    # @todo check if any differences before doing anything at all
    # original_externals = None
    # if os.exists('.gitsvnsubmodules'):
    #       original_externals = read('.gitsvnsubmodules')
    # if externals == original_externals:
    #     exit(0)
    # if not dryrun:
    #     print externals > .gitsvnsubmodules

    # operate on the externals data
    operate_on_externals_from_cwd(externals)

if __name__ == '__main__':
    # fetch before generating externals
    command = 'git svn fetch --all'
    if verbose:
        print 'running: ', command
    if not dryrun:
        os.system(command)
    git_svn_update_externals(os.getcwd())
